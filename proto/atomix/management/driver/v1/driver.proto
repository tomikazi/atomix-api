/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.management.driver.v1;

import "atomix/protocol/protocol.proto";
import "gogoproto/gogo.proto";

message AgentId {
    string namespace = 1;
    string name = 2;
}

message AgentAddress {
    string host = 1;
    int32 port = 2;
}

message AgentConfig {
    atomix.protocol.ProtocolConfig protocol = 1 [(gogoproto.nullable) = false];
}

message StartAgentRequest {
    AgentId agent_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "AgentID"];
    AgentAddress address = 2 [(gogoproto.nullable) = false];
    AgentConfig config = 3 [(gogoproto.nullable) = false];
}

message StartAgentResponse {

}

message ConfigureAgentRequest {
    AgentId agent_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "AgentID"];
    AgentConfig config = 2 [(gogoproto.nullable) = false];
}

message ConfigureAgentResponse {

}

message StopAgentRequest {
    AgentId agent_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "AgentID"];
}

message StopAgentResponse {

}

service Driver {
    rpc StartAgent (StartAgentRequest) returns (StartAgentResponse);
    rpc ConfigureAgent (ConfigureAgentRequest) returns (ConfigureAgentResponse);
    rpc StopAgent (StopAgentRequest) returns (StopAgentResponse);
}
