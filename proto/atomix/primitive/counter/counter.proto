// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "atomix/primitive/primitive.proto";
import "atomix/primitive/service.proto";
import "atomix/primitive/operation.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.counter;

message IncrementRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    int64 delta = 2;
}

message IncrementResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    int64 value = 2;
}

message DecrementRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    int64 delta = 2;
}

message DecrementResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    int64 value = 2;
}

message GetRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message GetResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    int64 value = 2;
}

message Precondition {
    oneof precondition {
        int64 value = 1;
    }
}

message SetRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    int64 value = 2;
    repeated Precondition preconditions = 3 [(gogoproto.nullable) = false];
}

message SetResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    int64 value = 2;
}

message Value {
    int64 value = 1;
}

// CounterService implements a distributed counter
service CounterService {
    option (atomix.primitive.type) = "Counter";

    // Set sets the counter value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.operation.id) = 1;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Get gets the current counter value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.operation.id) = 2;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // Increment increments the counter value
    rpc Increment (IncrementRequest) returns (IncrementResponse) {
        option (atomix.primitive.operation.id) = 3;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Decrement decrements the counter value
    rpc Decrement (DecrementRequest) returns (DecrementResponse) {
        option (atomix.primitive.operation.id) = 4;
        option (atomix.primitive.operation.type) = COMMAND;
    }
}