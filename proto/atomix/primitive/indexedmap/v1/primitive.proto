/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive.indexedmap.v1;

import "google/protobuf/duration.proto";
import "atomix/primitive/service.proto";
import "atomix/primitive/operation.proto";
import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

message SizeRequest {

}

message SizeResponse {
    uint32 size = 2 [(atomix.primitive.operation.aggregate) = SUM];
}

message Precondition {
    oneof precondition {
        atomix.primitive.meta.ObjectMeta metadata = 1;
    }
}

message PutRequest {
    Entry entry = 2 [(gogoproto.nullable) = false];
    repeated Precondition preconditions = 3 [(gogoproto.nullable) = false];
}

message PutResponse {
    Entry entry = 2;
}

message GetRequest {
    Position position = 2 [(gogoproto.nullable) = false];
}

message GetResponse {
    Entry entry = 2;
}

message FirstEntryRequest {

}

message FirstEntryResponse {
    Entry entry = 2;
}

message LastEntryRequest {

}

message LastEntryResponse {
    Entry entry = 2;
}

message PrevEntryRequest {
    uint64 index = 2;
}

message PrevEntryResponse {
    Entry entry = 2;
}

message NextEntryRequest {
    uint64 index = 2;
}

message NextEntryResponse {
    Entry entry = 2;
}

message RemoveRequest {
    Entry entry = 2;
    repeated Precondition preconditions = 3 [(gogoproto.nullable) = false];
}

message RemoveResponse {
    Entry entry = 2;
}

message ClearRequest {

}

message ClearResponse {

}

message EntriesRequest {

}

message EntriesResponse {
    Entry entry = 2 [(gogoproto.nullable) = false];
}

message EventsRequest {
    Position pos = 2 [(gogoproto.nullable) = false];
    bool replay = 3;
}

message EventsResponse {
    Event event = 2 [(gogoproto.nullable) = false];
}

message Event {
    Type type = 1;
    Entry entry = 2 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        INSERT = 1;
        UPDATE = 2;
        REMOVE = 3;
        REPLAY = 4;
    }
}

message Position {
    uint64 index = 1;
    string key = 2;
}

message Value {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    bytes value = 2;
    google.protobuf.Duration ttl = 3 [(gogoproto.customname) = "TTL", (gogoproto.stdduration) = true];
}

message Entry {
    Position pos = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    Value value = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

// IndexedMap is a service for a sorted/indexed map primitive
service IndexedMap {
    option (atomix.primitive.service.type) = PRIMITIVE;

    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.operation.id) = 1;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // Put puts an entry into the map
    rpc Put (PutRequest) returns (PutResponse) {
        option (atomix.primitive.operation.id) = 2;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.operation.id) = 3;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // FirstEntry gets the first entry in the map
    rpc FirstEntry (FirstEntryRequest) returns (FirstEntryResponse) {
        option (atomix.primitive.operation.id) = 4;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // LastEntry gets the last entry in the map
    rpc LastEntry (LastEntryRequest) returns (LastEntryResponse) {
        option (atomix.primitive.operation.id) = 5;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // PrevEntry gets the previous entry in the map
    rpc PrevEntry (PrevEntryRequest) returns (PrevEntryResponse) {
        option (atomix.primitive.operation.id) = 6;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // NextEntry gets the next entry in the map
    rpc NextEntry (NextEntryRequest) returns (NextEntryResponse) {
        option (atomix.primitive.operation.id) = 7;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.operation.id) = 8;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.operation.id) = 9;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.operation.id) = 10;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse) {
        option (atomix.primitive.operation.id) = 11;
        option (atomix.primitive.operation.type) = QUERY;
    }
}
