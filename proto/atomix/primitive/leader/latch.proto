/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "atomix/primitive/primitive.proto";
import "atomix/primitive/operation.proto";
import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.leader;

message LatchRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message LatchResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Latch latch = 2 [(gogoproto.nullable) = false];
}

message GetRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message GetResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Latch latch = 2 [(gogoproto.nullable) = false];
}

message EventsRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message EventsResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Event event = 2 [(gogoproto.nullable) = false];
}

message Event {
    Type type = 1;
    Latch latch = 2 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        CHANGE = 1;
    }
}

message Latch {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string leader = 2;
    repeated string participants = 3;
}

// Leader latch service
service LeaderLatchService {
    option (atomix.primitive.type) = "LeaderLatch";

    // Latch attempts to acquire the leader latch
    rpc Latch (LatchRequest) returns (LatchResponse) {
        option (atomix.primitive.operation.id) = 1;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Get gets the current leader
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.operation.id) = 2;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // Events listens for leader change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.operation.id) = 3;
        option (atomix.primitive.operation.type) = COMMAND;
    }
}