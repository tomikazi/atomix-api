// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "atomix/primitive/primitive.proto";
import "atomix/primitive/service.proto";
import "atomix/primitive/operation.proto";
import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.leader;

message LatchRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message LatchResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Latch latch = 2 [(gogoproto.nullable) = false];
}

message GetRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message GetResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Latch latch = 2 [(gogoproto.nullable) = false];
}

message EventsRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message EventsResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Event event = 2 [(gogoproto.nullable) = false];
}

message Event {
    Type type = 1;
    Latch latch = 2 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        CHANGE = 1;
    }
}

message Latch {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string leader = 2;
    repeated string participants = 3;
}

// Leader latch service
service LeaderLatchService {
    option (atomix.primitive.type) = "LeaderLatch";

    // Latch attempts to acquire the leader latch
    rpc Latch (LatchRequest) returns (LatchResponse) {
        option (atomix.primitive.operation.id) = 1;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Get gets the current leader
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.operation.id) = 2;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // Events listens for leader change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.operation.id) = 3;
        option (atomix.primitive.operation.type) = COMMAND;
    }
}