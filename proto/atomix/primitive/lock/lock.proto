/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "atomix/primitive/primitive.proto";
import "google/protobuf/duration.proto";
import "atomix/primitive/operation.proto";
import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.lock;

message LockRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true];
}

message LockResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message UnlockRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message UnlockResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message GetLockRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message GetLockResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message Lock {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;

    enum State {
        UNLOCKED = 0;
        LOCKED = 1;
    }
}

// LockService implements a distributed lock
service LockService {
    option (atomix.primitive.type) = "Lock";

    // Lock attempts to acquire the lock
    rpc Lock (LockRequest) returns (LockResponse) {
        option (atomix.primitive.operation.id) = 1;
        option (atomix.primitive.operation.type) = COMMAND;
        option (atomix.primitive.operation.async) = true;
    }

    // Unlock releases the lock
    rpc Unlock (UnlockRequest) returns (UnlockResponse) {
        option (atomix.primitive.operation.id) = 2;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // GetLock gets the lock state
    rpc GetLock (GetLockRequest) returns (GetLockResponse) {
        option (atomix.primitive.operation.id) = 3;
        option (atomix.primitive.operation.type) = QUERY;
    }
}