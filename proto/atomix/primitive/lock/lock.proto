// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "atomix/primitive/primitive.proto";
import "google/protobuf/duration.proto";
import "atomix/primitive/service.proto";
import "atomix/primitive/operation.proto";
import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.lock;

message LockRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true];
}

message LockResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message UnlockRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message UnlockResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message GetLockRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message GetLockResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Lock lock = 2 [(gogoproto.nullable) = false];
}

message Lock {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;

    enum State {
        UNLOCKED = 0;
        LOCKED = 1;
    }
}

// LockService implements a distributed lock
service LockService {
    option (atomix.primitive.type) = "Lock";

    // Lock attempts to acquire the lock
    rpc Lock (LockRequest) returns (LockResponse) {
        option (atomix.primitive.operation.id) = 1;
        option (atomix.primitive.operation.type) = COMMAND;
        option (atomix.primitive.operation.async) = true;
    }

    // Unlock releases the lock
    rpc Unlock (UnlockRequest) returns (UnlockResponse) {
        option (atomix.primitive.operation.id) = 2;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // GetLock gets the lock state
    rpc GetLock (GetLockRequest) returns (GetLockResponse) {
        option (atomix.primitive.operation.id) = 3;
        option (atomix.primitive.operation.type) = QUERY;
    }
}