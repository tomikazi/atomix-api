// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package atomix.primitive.map;

import "google/protobuf/duration.proto";
import "atomix/primitive/primitive.proto";
import "atomix/primitive/meta/object.proto";
import "atomix/primitive/service.proto";
import "atomix/primitive/operation.proto";
import "atomix/primitive/partition.proto";
import "gogoproto/gogo.proto";

message SizeRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message SizeResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    uint32 size = 2 [(atomix.primitive.operation.aggregate) = SUM];
}

message Precondition {
    oneof precondition {
        atomix.primitive.meta.ObjectMeta metadata = 1;
    }
}

message PutRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Entry entry = 2 [(gogoproto.nullable) = false];
    repeated Precondition preconditions = 3 [(gogoproto.nullable) = false];
}

message PutResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Entry entry = 2 [(gogoproto.nullable) = false];
}

message GetRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    string key = 2 [(atomix.primitive.partition.key) = true];
}

message GetResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Entry entry = 2 [(gogoproto.nullable) = false];
}

message RemoveRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Key key = 2 [(gogoproto.nullable) = false];
    repeated Precondition preconditions = 3 [(gogoproto.nullable) = false];
}

message RemoveResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Entry entry = 2 [(gogoproto.nullable) = false];
}

message ClearRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message ClearResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message EntriesRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
}

message EntriesResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Entry entry = 2 [(gogoproto.nullable) = false];
}

message EventsRequest {
    atomix.primitive.RequestHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    string key = 2;
    bool replay = 3;
}

message EventsResponse {
    atomix.primitive.ResponseHeaders headers = 1 [(atomix.primitive.operation.headers) = true, (gogoproto.nullable) = false];
    Event event = 2 [(gogoproto.nullable) = false];
}

message Event {
    Type type = 1;
    Entry entry = 2 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        INSERT = 1;
        UPDATE = 2;
        REMOVE = 3;
        REPLAY = 4;
    }
}

message Entry {
    Key key = 1 [(gogoproto.nullable) = false];
    Value value = 2;
}

message Key {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string key = 2 [(atomix.primitive.partition.key) = true];
}

message Value {
    bytes value = 1;
    google.protobuf.Duration ttl = 2 [(gogoproto.customname) = "TTL", (gogoproto.stdduration) = true];
}

// MapService implements a distributed map
service MapService {
    option (atomix.primitive.type) = "Map";
    option (atomix.primitive.partitioned) = true;

    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.operation.id) = 1;
        option (atomix.primitive.operation.type) = QUERY;
    }

    // Put puts an entry into the map
    rpc Put (PutRequest) returns (PutResponse) {
        option (atomix.primitive.operation.id) = 2;
        option (atomix.primitive.operation.type) = COMMAND;
        option (atomix.primitive.partition.strategy) = HASH;
    }

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.operation.id) = 3;
        option (atomix.primitive.operation.type) = QUERY;
        option (atomix.primitive.partition.strategy) = HASH;
    }

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.operation.id) = 4;
        option (atomix.primitive.operation.type) = COMMAND;
        option (atomix.primitive.partition.strategy) = HASH;
    }

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.operation.id) = 5;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.operation.id) = 6;
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse) {
        option (atomix.primitive.operation.id) = 7;
        option (atomix.primitive.operation.type) = QUERY;
    }
}
