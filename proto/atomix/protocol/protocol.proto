// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package atomix.protocol;

import "gogoproto/gogo.proto";

// Protocol configuration
message ProtocolConfig {
    // nodes is a list of replicas
    repeated ProtocolReplica replicas = 1 [(gogoproto.nullable) = false];

    // partitions is a list of partitions owned by the replicas
    repeated ProtocolPartition partitions = 2 [(gogoproto.nullable) = false];
}

// Replica configuration
message ProtocolReplica {
    // id is the unique member identifier
    string id = 1 [(gogoproto.customname) = "ID"];

    // node_id is the ID of the node on which the replica is deployed
    string node_id = 2 [(gogoproto.customname) = "NodeID"];

    // host is the member host
    string host = 3;

    // api_port is the port to use for the client API
    int32 api_port = 4 [(gogoproto.customname) = "APIPort", (gogoproto.jsontag) = "apiPort"];

    // extra_ports is a set of named ports
    map<string, int32> extra_ports = 5;
}

// Partition info
message ProtocolPartition {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID"];
    repeated string replicas = 2;
    string host = 3;
    int32 api_port = 4 [(gogoproto.customname) = "APIPort", (gogoproto.jsontag) = "apiPort"];
    repeated string read_replicas = 5;
}

message UpdateConfigRequest {
    ProtocolConfig config = 1 [(gogoproto.nullable) = false];
}

message UpdateConfigResponse {

}

// Atomix protocol configuration service
service ProtocolConfigService {
    // UpdateConfig updates the protocol configuration
    rpc UpdateConfig (UpdateConfigRequest) returns (UpdateConfigResponse);
}
