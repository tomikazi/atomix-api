# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/management/broker/v1/broker.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Optional

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class PrimitiveId(betterproto.Message):
    type: str = betterproto.string_field(1)
    namespace: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PrimitiveAddress(betterproto.Message):
    host: str = betterproto.string_field(1)
    port: int = betterproto.int32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RegisterPrimitiveRequest(betterproto.Message):
    primitive_id: "PrimitiveId" = betterproto.message_field(1)
    address: "PrimitiveAddress" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RegisterPrimitiveResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnregisterPrimitiveRequest(betterproto.Message):
    primitive_id: "PrimitiveId" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnregisterPrimitiveResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LookupPrimitiveRequest(betterproto.Message):
    primitive_id: "PrimitiveId" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LookupPrimitiveResponse(betterproto.Message):
    address: "PrimitiveAddress" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class BrokerStub(betterproto.ServiceStub):
    async def register_primitive(
        self, *, primitive_id: "PrimitiveId" = None, address: "PrimitiveAddress" = None
    ) -> "RegisterPrimitiveResponse":

        request = RegisterPrimitiveRequest()
        if primitive_id is not None:
            request.primitive_id = primitive_id
        if address is not None:
            request.address = address

        return await self._unary_unary(
            "/atomix.management.broker.v1.Broker/RegisterPrimitive",
            request,
            RegisterPrimitiveResponse,
        )

    async def unregister_primitive(
        self, *, primitive_id: "PrimitiveId" = None
    ) -> "UnregisterPrimitiveResponse":

        request = UnregisterPrimitiveRequest()
        if primitive_id is not None:
            request.primitive_id = primitive_id

        return await self._unary_unary(
            "/atomix.management.broker.v1.Broker/UnregisterPrimitive",
            request,
            UnregisterPrimitiveResponse,
        )

    async def lookup_primitive(
        self, *, primitive_id: "PrimitiveId" = None
    ) -> "LookupPrimitiveResponse":

        request = LookupPrimitiveRequest()
        if primitive_id is not None:
            request.primitive_id = primitive_id

        return await self._unary_unary(
            "/atomix.management.broker.v1.Broker/LookupPrimitive",
            request,
            LookupPrimitiveResponse,
        )
