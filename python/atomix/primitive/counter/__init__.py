# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/primitive/counter/counter.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class IncrementRequest(betterproto.Message):
    delta: int = betterproto.int64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IncrementResponse(betterproto.Message):
    value: int = betterproto.int64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DecrementRequest(betterproto.Message):
    delta: int = betterproto.int64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DecrementResponse(betterproto.Message):
    value: int = betterproto.int64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetResponse(betterproto.Message):
    value: int = betterproto.int64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Precondition(betterproto.Message):
    value: int = betterproto.int64_field(1, group="precondition")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SetRequest(betterproto.Message):
    value: int = betterproto.int64_field(2)
    preconditions: List["Precondition"] = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SetResponse(betterproto.Message):
    value: int = betterproto.int64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Value(betterproto.Message):
    value: int = betterproto.int64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class CounterServiceStub(betterproto.ServiceStub):
    """CounterService implements a distributed counter"""

    async def set(
        self, *, value: int = 0, preconditions: Optional[List["Precondition"]] = None
    ) -> "SetResponse":
        """Set sets the counter value"""

        preconditions = preconditions or []

        request = SetRequest()
        request.value = value
        if preconditions is not None:
            request.preconditions = preconditions

        return await self._unary_unary(
            "/atomix.primitive.counter.CounterService/Set", request, SetResponse
        )

    async def get(self) -> "GetResponse":
        """Get gets the current counter value"""

        request = GetRequest()

        return await self._unary_unary(
            "/atomix.primitive.counter.CounterService/Get", request, GetResponse
        )

    async def increment(self, *, delta: int = 0) -> "IncrementResponse":
        """Increment increments the counter value"""

        request = IncrementRequest()
        request.delta = delta

        return await self._unary_unary(
            "/atomix.primitive.counter.CounterService/Increment",
            request,
            IncrementResponse,
        )

    async def decrement(self, *, delta: int = 0) -> "DecrementResponse":
        """Decrement decrements the counter value"""

        request = DecrementRequest()
        request.delta = delta

        return await self._unary_unary(
            "/atomix.primitive.counter.CounterService/Decrement",
            request,
            DecrementResponse,
        )
