# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/primitive/leader/v1/primitive.proto, atomix/primitive/leader/v1/session.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, List, Optional

import betterproto
import grpclib


class EventType(betterproto.Enum):
    NONE = 0
    CHANGE = 1


@dataclass(eq=False, repr=False)
class LatchRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LatchResponse(betterproto.Message):
    latch: "Latch" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetResponse(betterproto.Message):
    latch: "Latch" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EventsRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EventsResponse(betterproto.Message):
    event: "Event" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Event(betterproto.Message):
    type: "EventType" = betterproto.enum_field(1)
    latch: "Latch" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Latch(betterproto.Message):
    meta: "__meta__.ObjectMeta" = betterproto.message_field(1)
    leader: str = betterproto.string_field(2)
    participants: List[str] = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class OpenSessionRequest(betterproto.Message):
    options: "LeaderLatchSessionOptions" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class OpenSessionResponse(betterproto.Message):
    session_id: int = betterproto.uint64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LeaderLatchSessionOptions(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CloseSessionRequest(betterproto.Message):
    session_id: int = betterproto.uint64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CloseSessionResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


class LeaderLatchStub(betterproto.ServiceStub):
    """LeaderLatch is a service for a leader latch primitive"""

    async def latch(self) -> "LatchResponse":
        """Latch attempts to acquire the leader latch"""

        request = LatchRequest()

        return await self._unary_unary(
            "/atomix.primitive.leader.v1.LeaderLatch/Latch", request, LatchResponse
        )

    async def get(self) -> "GetResponse":
        """Get gets the current leader"""

        request = GetRequest()

        return await self._unary_unary(
            "/atomix.primitive.leader.v1.LeaderLatch/Get", request, GetResponse
        )

    async def events(self) -> AsyncIterator["EventsResponse"]:
        """Events listens for leader change events"""

        request = EventsRequest()

        async for response in self._unary_stream(
            "/atomix.primitive.leader.v1.LeaderLatch/Events",
            request,
            EventsResponse,
        ):
            yield response


class LeaderLatchSessionStub(betterproto.ServiceStub):
    """LeaderLatch is a service for a leader latch primitive"""

    async def open_session(
        self, *, options: "LeaderLatchSessionOptions" = None
    ) -> "OpenSessionResponse":
        """Latch attempts to acquire the leader latch"""

        request = OpenSessionRequest()
        if options is not None:
            request.options = options

        return await self._unary_unary(
            "/atomix.primitive.leader.v1.LeaderLatchSession/OpenSession",
            request,
            OpenSessionResponse,
        )

    async def close_session(self, *, session_id: int = 0) -> "CloseSessionResponse":
        """Get gets the current leader"""

        request = CloseSessionRequest()
        request.session_id = session_id

        return await self._unary_unary(
            "/atomix.primitive.leader.v1.LeaderLatchSession/CloseSession",
            request,
            CloseSessionResponse,
        )


from ... import meta as __meta__
