# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/primitive/list/v1/manager.proto, atomix/primitive/list/v1/primitive.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, List, Optional

import betterproto
import grpclib


class EventType(betterproto.Enum):
    NONE = 0
    ADD = 1
    REMOVE = 2
    REPLAY = 3


@dataclass(eq=False, repr=False)
class OpenSessionRequest(betterproto.Message):
    primitive_id: str = betterproto.string_field(1)
    options: "ListSessionOptions" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class OpenSessionResponse(betterproto.Message):
    session_id: int = betterproto.uint64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListSessionOptions(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CloseSessionRequest(betterproto.Message):
    session_id: int = betterproto.uint64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CloseSessionResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SizeRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SizeResponse(betterproto.Message):
    size: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ContainsRequest(betterproto.Message):
    value: "Value" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ContainsResponse(betterproto.Message):
    contains: bool = betterproto.bool_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Precondition(betterproto.Message):
    metadata: "__meta_v1__.ObjectMeta" = betterproto.message_field(
        1, group="precondition"
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendRequest(betterproto.Message):
    value: "Value" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetRequest(betterproto.Message):
    index: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetResponse(betterproto.Message):
    item: "Item" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SetRequest(betterproto.Message):
    item: "Item" = betterproto.message_field(2)
    preconditions: List["Precondition"] = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SetResponse(betterproto.Message):
    item: "Item" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class InsertRequest(betterproto.Message):
    item: "Item" = betterproto.message_field(2)
    preconditions: List["Precondition"] = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class InsertResponse(betterproto.Message):
    item: "Item" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RemoveRequest(betterproto.Message):
    index: int = betterproto.uint32_field(2)
    preconditions: List["Precondition"] = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RemoveResponse(betterproto.Message):
    item: "Item" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ClearRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ClearResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EventsRequest(betterproto.Message):
    replay: bool = betterproto.bool_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EventsResponse(betterproto.Message):
    event: "Event" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Event(betterproto.Message):
    type: "EventType" = betterproto.enum_field(1)
    item: "Item" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ElementsRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ElementsResponse(betterproto.Message):
    item: "Item" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Item(betterproto.Message):
    index: int = betterproto.uint32_field(1)
    value: "Value" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Value(betterproto.Message):
    meta: "__meta_v1__.ObjectMeta" = betterproto.message_field(1)
    value: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


class ListManagerStub(betterproto.ServiceStub):
    """ListManager is a service for managing list sessions"""

    async def open_session(
        self, *, primitive_id: str = "", options: "ListSessionOptions" = None
    ) -> "OpenSessionResponse":

        request = OpenSessionRequest()
        request.primitive_id = primitive_id
        if options is not None:
            request.options = options

        return await self._unary_unary(
            "/atomix.primitive.list.v1.ListManager/OpenSession",
            request,
            OpenSessionResponse,
        )

    async def close_session(self, *, session_id: int = 0) -> "CloseSessionResponse":

        request = CloseSessionRequest()
        request.session_id = session_id

        return await self._unary_unary(
            "/atomix.primitive.list.v1.ListManager/CloseSession",
            request,
            CloseSessionResponse,
        )


class ListStub(betterproto.ServiceStub):
    """ListManager is a service for managing list sessions"""

    async def size(self) -> "SizeResponse":

        request = SizeRequest()

        return await self._unary_unary(
            "/atomix.primitive.list.v1.List/Size", request, SizeResponse
        )

    async def append(self, *, value: "Value" = None) -> "AppendResponse":

        request = AppendRequest()
        if value is not None:
            request.value = value

        return await self._unary_unary(
            "/atomix.primitive.list.v1.List/Append", request, AppendResponse
        )

    async def insert(
        self,
        *,
        item: "Item" = None,
        preconditions: Optional[List["Precondition"]] = None,
    ) -> "InsertResponse":
        preconditions = preconditions or []

        request = InsertRequest()
        if item is not None:
            request.item = item
        if preconditions is not None:
            request.preconditions = preconditions

        return await self._unary_unary(
            "/atomix.primitive.list.v1.List/Insert", request, InsertResponse
        )

    async def get(self, *, index: int = 0) -> "GetResponse":

        request = GetRequest()
        request.index = index

        return await self._unary_unary(
            "/atomix.primitive.list.v1.List/Get", request, GetResponse
        )

    async def set(
        self,
        *,
        item: "Item" = None,
        preconditions: Optional[List["Precondition"]] = None,
    ) -> "SetResponse":
        preconditions = preconditions or []

        request = SetRequest()
        if item is not None:
            request.item = item
        if preconditions is not None:
            request.preconditions = preconditions

        return await self._unary_unary(
            "/atomix.primitive.list.v1.List/Set", request, SetResponse
        )

    async def remove(
        self, *, index: int = 0, preconditions: Optional[List["Precondition"]] = None
    ) -> "RemoveResponse":
        preconditions = preconditions or []

        request = RemoveRequest()
        request.index = index
        if preconditions is not None:
            request.preconditions = preconditions

        return await self._unary_unary(
            "/atomix.primitive.list.v1.List/Remove", request, RemoveResponse
        )

    async def clear(self) -> "ClearResponse":

        request = ClearRequest()

        return await self._unary_unary(
            "/atomix.primitive.list.v1.List/Clear", request, ClearResponse
        )

    async def events(self, *, replay: bool = False) -> AsyncIterator["EventsResponse"]:

        request = EventsRequest()
        request.replay = replay

        async for response in self._unary_stream(
            "/atomix.primitive.list.v1.List/Events",
            request,
            EventsResponse,
        ):
            yield response

    async def elements(self) -> AsyncIterator["ElementsResponse"]:

        request = ElementsRequest()

        async for response in self._unary_stream(
            "/atomix.primitive.list.v1.List/Elements",
            request,
            ElementsResponse,
        ):
            yield response


from ...meta import v1 as __meta_v1__
