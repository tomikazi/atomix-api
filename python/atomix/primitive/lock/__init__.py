# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/primitive/lock/lock.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import Optional

import betterproto
import grpclib


class LockState(betterproto.Enum):
    UNLOCKED = 0
    LOCKED = 1


@dataclass(eq=False, repr=False)
class LockRequest(betterproto.Message):
    timeout: timedelta = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LockResponse(betterproto.Message):
    lock: "Lock" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnlockRequest(betterproto.Message):
    lock: "Lock" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnlockResponse(betterproto.Message):
    lock: "Lock" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetLockRequest(betterproto.Message):
    lock: "Lock" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetLockResponse(betterproto.Message):
    lock: "Lock" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Lock(betterproto.Message):
    meta: "_meta__.ObjectMeta" = betterproto.message_field(1)
    state: "LockState" = betterproto.enum_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


class LockServiceStub(betterproto.ServiceStub):
    """LockService implements a distributed lock"""

    async def lock(self, *, timeout: timedelta = None) -> "LockResponse":
        """Lock attempts to acquire the lock"""

        request = LockRequest()
        if timeout is not None:
            request.timeout = timeout

        return await self._unary_unary(
            "/atomix.primitive.lock.LockService/Lock", request, LockResponse
        )

    async def unlock(self, *, lock: "Lock" = None) -> "UnlockResponse":
        """Unlock releases the lock"""

        request = UnlockRequest()
        if lock is not None:
            request.lock = lock

        return await self._unary_unary(
            "/atomix.primitive.lock.LockService/Unlock", request, UnlockResponse
        )

    async def get_lock(self, *, lock: "Lock" = None) -> "GetLockResponse":
        """GetLock gets the lock state"""

        request = GetLockRequest()
        if lock is not None:
            request.lock = lock

        return await self._unary_unary(
            "/atomix.primitive.lock.LockService/GetLock", request, GetLockResponse
        )


from .. import meta as _meta__
