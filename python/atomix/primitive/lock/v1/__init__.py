# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/primitive/lock/v1/manager.proto, atomix/primitive/lock/v1/primitive.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import Optional

import betterproto
import grpclib


class LockInstanceState(betterproto.Enum):
    UNLOCKED = 0
    LOCKED = 1


@dataclass(eq=False, repr=False)
class OpenSessionRequest(betterproto.Message):
    primitive_id: str = betterproto.string_field(1)
    options: "LockSessionOptions" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class OpenSessionResponse(betterproto.Message):
    session_id: int = betterproto.uint64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LockSessionOptions(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CloseSessionRequest(betterproto.Message):
    session_id: int = betterproto.uint64_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CloseSessionResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LockRequest(betterproto.Message):
    timeout: timedelta = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LockResponse(betterproto.Message):
    lock: "LockInstance" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnlockRequest(betterproto.Message):
    lock: "LockInstance" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnlockResponse(betterproto.Message):
    lock: "LockInstance" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetLockRequest(betterproto.Message):
    lock: "LockInstance" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetLockResponse(betterproto.Message):
    lock: "LockInstance" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LockInstance(betterproto.Message):
    meta: "__meta_v1__.ObjectMeta" = betterproto.message_field(1)
    state: "LockInstanceState" = betterproto.enum_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


class LockManagerStub(betterproto.ServiceStub):
    """LockManager is a service for managing lock sessions"""

    async def open_session(
        self, *, primitive_id: str = "", options: "LockSessionOptions" = None
    ) -> "OpenSessionResponse":

        request = OpenSessionRequest()
        request.primitive_id = primitive_id
        if options is not None:
            request.options = options

        return await self._unary_unary(
            "/atomix.primitive.lock.v1.LockManager/OpenSession",
            request,
            OpenSessionResponse,
        )

    async def close_session(self, *, session_id: int = 0) -> "CloseSessionResponse":

        request = CloseSessionRequest()
        request.session_id = session_id

        return await self._unary_unary(
            "/atomix.primitive.lock.v1.LockManager/CloseSession",
            request,
            CloseSessionResponse,
        )


class LockStub(betterproto.ServiceStub):
    """LockManager is a service for managing lock sessions"""

    async def lock(self, *, timeout: timedelta = None) -> "LockResponse":

        request = LockRequest()
        if timeout is not None:
            request.timeout = timeout

        return await self._unary_unary(
            "/atomix.primitive.lock.v1.Lock/Lock", request, LockResponse
        )

    async def unlock(self, *, lock: "LockInstance" = None) -> "UnlockResponse":

        request = UnlockRequest()
        if lock is not None:
            request.lock = lock

        return await self._unary_unary(
            "/atomix.primitive.lock.v1.Lock/Unlock", request, UnlockResponse
        )

    async def get_lock(self, *, lock: "LockInstance" = None) -> "GetLockResponse":

        request = GetLockRequest()
        if lock is not None:
            request.lock = lock

        return await self._unary_unary(
            "/atomix.primitive.lock.v1.Lock/GetLock", request, GetLockResponse
        )


from ...meta import v1 as __meta_v1__
